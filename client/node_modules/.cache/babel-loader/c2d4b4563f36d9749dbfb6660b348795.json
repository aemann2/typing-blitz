{"ast":null,"code":"var _jsxFileName = \"/Users/adammann/Desktop/Projects/Portfolio/typing-blitz/client/src/components/score/Score.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport classes from './css/Score.module.scss';\nimport { ScoreContext } from '../../context/ScoreContext';\nimport { WordsContext } from '../../context/WordsContext';\nimport { GameStateContext } from '../../context/GameStateContext';\nimport useKeypress from '../../hooks/useKeypress';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Score = () => {\n  _s();\n\n  const {\n    score,\n    setScore\n  } = useContext(ScoreContext);\n  const {\n    currentWord,\n    substring\n  } = useContext(WordsContext);\n  const {\n    isTimeOut\n  } = useContext(GameStateContext);\n  useKeypress(e => {\n    if (currentWord && !isTimeOut) {\n      // if the key is the first letter of the current word, or if the substring exists and the key is the first letter...\n      if (!substring && e.key === currentWord[0]) {\n        setScore(score + 10);\n      } else if (substring && e.key === substring[0]) {\n        setScore(score + 10);\n      } else {\n        setScore(score - 10);\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: classes.score,\n      children: [\"Score:\", score, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(Score, \"L1Y7a8YXhhwWDESuXrBxxRXJ67I=\", false, function () {\n  return [useKeypress];\n});\n\n_c = Score;\nexport default Score;\n\nvar _c;\n\n$RefreshReg$(_c, \"Score\");","map":{"version":3,"sources":["/Users/adammann/Desktop/Projects/Portfolio/typing-blitz/client/src/components/score/Score.js"],"names":["React","useContext","classes","ScoreContext","WordsContext","GameStateContext","useKeypress","Score","score","setScore","currentWord","substring","isTimeOut","e","key"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,SAASC,YAAT,QAA6B,4BAA7B;AACA,SAASC,YAAT,QAA6B,4BAA7B;AACA,SAASC,gBAAT,QAAiC,gCAAjC;AACA,OAAOC,WAAP,MAAwB,yBAAxB;;;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAAA;;AAClB,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsBR,UAAU,CAACE,YAAD,CAAtC;AACA,QAAM;AAAEO,IAAAA,WAAF;AAAeC,IAAAA;AAAf,MAA6BV,UAAU,CAACG,YAAD,CAA7C;AACA,QAAM;AAAEQ,IAAAA;AAAF,MAAgBX,UAAU,CAACI,gBAAD,CAAhC;AAEAC,EAAAA,WAAW,CAAEO,CAAD,IAAO;AACjB,QAAIH,WAAW,IAAI,CAACE,SAApB,EAA+B;AAC7B;AACA,UAAI,CAACD,SAAD,IAAcE,CAAC,CAACC,GAAF,KAAUJ,WAAW,CAAC,CAAD,CAAvC,EAA4C;AAC1CD,QAAAA,QAAQ,CAACD,KAAK,GAAG,EAAT,CAAR;AACD,OAFD,MAEO,IAAIG,SAAS,IAAIE,CAAC,CAACC,GAAF,KAAUH,SAAS,CAAC,CAAD,CAApC,EAAyC;AAC9CF,QAAAA,QAAQ,CAACD,KAAK,GAAG,EAAT,CAAR;AACD,OAFM,MAEA;AACLC,QAAAA,QAAQ,CAACD,KAAK,GAAG,EAAT,CAAR;AACD;AACF;AACF,GAXU,CAAX;AAaA,sBACE;AAAA,2BACE;AAAI,MAAA,SAAS,EAAEN,OAAO,CAACM,KAAvB;AAAA,2BAAqCA,KAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAKD,CAvBD;;GAAMD,K;UAKJD,W;;;KALIC,K;AAyBN,eAAeA,KAAf","sourcesContent":["import React, { useContext } from 'react';\nimport classes from './css/Score.module.scss';\nimport { ScoreContext } from '../../context/ScoreContext';\nimport { WordsContext } from '../../context/WordsContext';\nimport { GameStateContext } from '../../context/GameStateContext';\nimport useKeypress from '../../hooks/useKeypress';\n\nconst Score = () => {\n  const { score, setScore } = useContext(ScoreContext);\n  const { currentWord, substring } = useContext(WordsContext);\n  const { isTimeOut } = useContext(GameStateContext);\n\n  useKeypress((e) => {\n    if (currentWord && !isTimeOut) {\n      // if the key is the first letter of the current word, or if the substring exists and the key is the first letter...\n      if (!substring && e.key === currentWord[0]) {\n        setScore(score + 10);\n      } else if (substring && e.key === substring[0]) {\n        setScore(score + 10);\n      } else {\n        setScore(score - 10);\n      }\n    }\n  });\n\n  return (\n    <>\n      <h2 className={classes.score}>Score:{score} </h2>\n    </>\n  );\n};\n\nexport default Score;\n"]},"metadata":{},"sourceType":"module"}