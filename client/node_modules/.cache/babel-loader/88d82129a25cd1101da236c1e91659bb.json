{"ast":null,"code":"var _jsxFileName = \"/Users/adammann/Desktop/Projects/Portfolio/typing-blitz/client/src/components/popup/Popup.js\",\n    _s = $RefreshSig$();\n\nimport { useContext, useRef, useEffect } from 'react';\nimport { WordsContext } from '../../context/WordsContext';\nimport { GameStateContext } from '../../context/GameStateContext';\nimport { ScoreContext } from '../../context/ScoreContext';\nimport axios from 'axios';\nimport classes from './css/Popup.module.scss';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Popup = () => {\n  _s();\n\n  const {\n    showPopup,\n    setShowPopup\n  } = useContext(GameStateContext);\n  const {\n    score,\n    setScore\n  } = useContext(ScoreContext);\n  const {\n    currentWord,\n    wordArray,\n    setCurrentWord\n  } = useContext(WordsContext);\n  const button = useRef(null);\n\n  async function testPost() {\n    try {\n      const res = await axios.post('/api/v1/scores', {\n        player: 'TST2',\n        score: score\n      });\n      console.log(res);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const handleClose = () => {\n    setShowPopup(false);\n    const wordIndex = wordArray.indexOf(currentWord);\n    setCurrentWord(wordArray[wordIndex + 1]);\n    testPost();\n    setScore(0);\n  };\n\n  useEffect(() => {\n    if (button.current) {\n      button.current.focus();\n    }\n  }, [showPopup]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Modal, {\n      show: showPopup,\n      onHide: handleClose,\n      backdrop: \"static\",\n      keyboard: false // setting animation to false to avoid findDOMNode error\n      ,\n      animation: false,\n      centered: true,\n      className: classes.modal,\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          className: classes.title,\n          children: \"Time Up!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        className: classes.body,\n        children: [\"Score: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          ref: button,\n          onClick: handleClose,\n          children: \"Play Again\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 4\n    }, this)\n  }, void 0, false);\n};\n\n_s(Popup, \"v6pgoQO/WU3sGmV07s7NWmLhrhc=\");\n\n_c = Popup;\nexport default Popup;\n\nvar _c;\n\n$RefreshReg$(_c, \"Popup\");","map":{"version":3,"sources":["/Users/adammann/Desktop/Projects/Portfolio/typing-blitz/client/src/components/popup/Popup.js"],"names":["useContext","useRef","useEffect","WordsContext","GameStateContext","ScoreContext","axios","classes","Modal","Button","Popup","showPopup","setShowPopup","score","setScore","currentWord","wordArray","setCurrentWord","button","testPost","res","post","player","console","log","error","handleClose","wordIndex","indexOf","current","focus","modal","title","body"],"mappings":";;;AAAA,SAASA,UAAT,EAAqBC,MAArB,EAA6BC,SAA7B,QAA8C,OAA9C;AACA,SAASC,YAAT,QAA6B,4BAA7B;AACA,SAASC,gBAAT,QAAiC,gCAAjC;AACA,SAASC,YAAT,QAA6B,4BAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;;;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAAA;;AACnB,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAA8BZ,UAAU,CAACI,gBAAD,CAA9C;AACA,QAAM;AAAES,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsBd,UAAU,CAACK,YAAD,CAAtC;AACA,QAAM;AAAEU,IAAAA,WAAF;AAAeC,IAAAA,SAAf;AAA0BC,IAAAA;AAA1B,MAA6CjB,UAAU,CAACG,YAAD,CAA7D;AAEA,QAAMe,MAAM,GAAGjB,MAAM,CAAC,IAAD,CAArB;;AAEA,iBAAekB,QAAf,GAA0B;AACzB,QAAI;AACH,YAAMC,GAAG,GAAG,MAAMd,KAAK,CAACe,IAAN,CAAW,gBAAX,EAA6B;AAC9CC,QAAAA,MAAM,EAAE,MADsC;AAE9CT,QAAAA,KAAK,EAAEA;AAFuC,OAA7B,CAAlB;AAKAU,MAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ;AACA,KAPD,CAOE,OAAOK,KAAP,EAAc;AACfF,MAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACA;AACD;;AAED,QAAMC,WAAW,GAAG,MAAM;AACzBd,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,UAAMe,SAAS,GAAGX,SAAS,CAACY,OAAV,CAAkBb,WAAlB,CAAlB;AACAE,IAAAA,cAAc,CAACD,SAAS,CAACW,SAAS,GAAG,CAAb,CAAV,CAAd;AACAR,IAAAA,QAAQ;AACRL,IAAAA,QAAQ,CAAC,CAAD,CAAR;AACA,GAND;;AAQAZ,EAAAA,SAAS,CAAC,MAAM;AACf,QAAIgB,MAAM,CAACW,OAAX,EAAoB;AACnBX,MAAAA,MAAM,CAACW,OAAP,CAAeC,KAAf;AACA;AACD,GAJQ,EAIN,CAACnB,SAAD,CAJM,CAAT;AAMA,sBACC;AAAA,2BACC,QAAC,KAAD;AACC,MAAA,IAAI,EAAEA,SADP;AAEC,MAAA,MAAM,EAAEe,WAFT;AAGC,MAAA,QAAQ,EAAC,QAHV;AAIC,MAAA,QAAQ,EAAE,KAJX,CAKC;AALD;AAMC,MAAA,SAAS,EAAE,KANZ;AAOC,MAAA,QAAQ,MAPT;AAQC,MAAA,SAAS,EAAEnB,OAAO,CAACwB,KARpB;AAAA,8BAUC,QAAC,KAAD,CAAO,MAAP;AAAc,QAAA,WAAW,MAAzB;AAAA,+BACC,QAAC,KAAD,CAAO,KAAP;AAAa,UAAA,SAAS,EAAExB,OAAO,CAACyB,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,cAVD,eAaC,QAAC,KAAD,CAAO,IAAP;AAAY,QAAA,SAAS,EAAEzB,OAAO,CAAC0B,IAA/B;AAAA,8BAA6CpB,KAA7C;AAAA;AAAA;AAAA;AAAA;AAAA,cAbD,eAcC,QAAC,KAAD,CAAO,MAAP;AAAA,+BACC,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAC,SAAhB;AAA0B,UAAA,GAAG,EAAEK,MAA/B;AAAuC,UAAA,OAAO,EAAEQ,WAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,cAdD;AAAA;AAAA;AAAA;AAAA;AAAA;AADD,mBADD;AAwBA,CA1DD;;GAAMhB,K;;KAAAA,K;AA4DN,eAAeA,KAAf","sourcesContent":["import { useContext, useRef, useEffect } from 'react';\nimport { WordsContext } from '../../context/WordsContext';\nimport { GameStateContext } from '../../context/GameStateContext';\nimport { ScoreContext } from '../../context/ScoreContext';\nimport axios from 'axios';\nimport classes from './css/Popup.module.scss';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\n\nconst Popup = () => {\n\tconst { showPopup, setShowPopup } = useContext(GameStateContext);\n\tconst { score, setScore } = useContext(ScoreContext);\n\tconst { currentWord, wordArray, setCurrentWord } = useContext(WordsContext);\n\n\tconst button = useRef(null);\n\n\tasync function testPost() {\n\t\ttry {\n\t\t\tconst res = await axios.post('/api/v1/scores', {\n\t\t\t\tplayer: 'TST2',\n\t\t\t\tscore: score,\n\t\t\t});\n\n\t\t\tconsole.log(res);\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t}\n\n\tconst handleClose = () => {\n\t\tsetShowPopup(false);\n\t\tconst wordIndex = wordArray.indexOf(currentWord);\n\t\tsetCurrentWord(wordArray[wordIndex + 1]);\n\t\ttestPost();\n\t\tsetScore(0);\n\t};\n\n\tuseEffect(() => {\n\t\tif (button.current) {\n\t\t\tbutton.current.focus();\n\t\t}\n\t}, [showPopup]);\n\n\treturn (\n\t\t<>\n\t\t\t<Modal\n\t\t\t\tshow={showPopup}\n\t\t\t\tonHide={handleClose}\n\t\t\t\tbackdrop='static'\n\t\t\t\tkeyboard={false}\n\t\t\t\t// setting animation to false to avoid findDOMNode error\n\t\t\t\tanimation={false}\n\t\t\t\tcentered\n\t\t\t\tclassName={classes.modal}\n\t\t\t>\n\t\t\t\t<Modal.Header closeButton>\n\t\t\t\t\t<Modal.Title className={classes.title}>Time Up!</Modal.Title>\n\t\t\t\t</Modal.Header>\n\t\t\t\t<Modal.Body className={classes.body}>Score: {score}</Modal.Body>\n\t\t\t\t<Modal.Footer>\n\t\t\t\t\t<Button variant='primary' ref={button} onClick={handleClose}>\n\t\t\t\t\t\tPlay Again\n\t\t\t\t\t</Button>\n\t\t\t\t</Modal.Footer>\n\t\t\t</Modal>\n\t\t</>\n\t);\n};\n\nexport default Popup;\n"]},"metadata":{},"sourceType":"module"}