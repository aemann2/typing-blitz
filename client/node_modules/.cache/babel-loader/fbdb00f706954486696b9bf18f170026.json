{"ast":null,"code":"var _jsxFileName = \"/Users/adammann/Desktop/Projects/Portfolio/typing-blitz/client/src/components/highlighter/Highlighter.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport classes from './css/Highlighter.module.scss';\nimport useKeypress from '../../hooks/useKeypress';\nimport { WordsContext } from '../../context/WordsContext';\nimport { GameStateContext } from '../../context/GameStateContext';\nimport { Highlight } from 'react-highlight-regex';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Highlighter = () => {\n  _s();\n\n  const {\n    currentWord,\n    toHighlight,\n    setToHighlight,\n    substring\n  } = useContext(WordsContext);\n  const {\n    isTimeOut\n  } = useContext(GameStateContext);\n  let regex = null;\n\n  if (toHighlight) {\n    regex = new RegExp(toHighlight);\n  }\n\n  useKeypress(e => {\n    if (currentWord && !isTimeOut) {\n      // if a substring has been created (after a first character has been typed)\n      if (substring) {\n        // if it's the last character and the right letter...\n        if (e.key === substring[0] && substring.length === 1) {\n          setToHighlight(''); // elif it's the right letter...\n        } else if (e.key === substring[0]) {\n          setToHighlight(toHighlight + e.key); // if it's the wrong letter\n        } else {\n          setToHighlight('');\n        }\n      } else if (e.key === currentWord[0]) {\n        // if it's the right character of the first letter, set the substring and highlight\n        setToHighlight(toHighlight + e.key);\n      } else {\n        //otherwise, switch the word out\n        setToHighlight('');\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: regex ? /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: classes.firstWord,\n      children: /*#__PURE__*/_jsxDEV(Highlight, {\n        match: regex,\n        text: currentWord,\n        highlightClassname: classes.highlight\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: classes.firstWord,\n      children: currentWord\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(Highlighter, \"exItpQfDzKOTeyZdwGbfdy/xudU=\", false, function () {\n  return [useKeypress];\n});\n\n_c = Highlighter;\nexport default Highlighter;\n\nvar _c;\n\n$RefreshReg$(_c, \"Highlighter\");","map":{"version":3,"sources":["/Users/adammann/Desktop/Projects/Portfolio/typing-blitz/client/src/components/highlighter/Highlighter.js"],"names":["React","useContext","classes","useKeypress","WordsContext","GameStateContext","Highlight","Highlighter","currentWord","toHighlight","setToHighlight","substring","isTimeOut","regex","RegExp","e","key","length","firstWord","highlight"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,OAAP,MAAoB,+BAApB;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,SAASC,YAAT,QAA6B,4BAA7B;AACA,SAASC,gBAAT,QAAiC,gCAAjC;AACA,SAASC,SAAT,QAA0B,uBAA1B;;;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACxB,QAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA,WAAf;AAA4BC,IAAAA,cAA5B;AAA4CC,IAAAA;AAA5C,MACJV,UAAU,CAACG,YAAD,CADZ;AAGA,QAAM;AAAEQ,IAAAA;AAAF,MAAgBX,UAAU,CAACI,gBAAD,CAAhC;AAEA,MAAIQ,KAAK,GAAG,IAAZ;;AAEA,MAAIJ,WAAJ,EAAiB;AACfI,IAAAA,KAAK,GAAG,IAAIC,MAAJ,CAAWL,WAAX,CAAR;AACD;;AAEDN,EAAAA,WAAW,CAAEY,CAAD,IAAO;AACjB,QAAIP,WAAW,IAAI,CAACI,SAApB,EAA+B;AAC7B;AACA,UAAID,SAAJ,EAAe;AACb;AACA,YAAII,CAAC,CAACC,GAAF,KAAUL,SAAS,CAAC,CAAD,CAAnB,IAA0BA,SAAS,CAACM,MAAV,KAAqB,CAAnD,EAAsD;AACpDP,UAAAA,cAAc,CAAC,EAAD,CAAd,CADoD,CAEpD;AACD,SAHD,MAGO,IAAIK,CAAC,CAACC,GAAF,KAAUL,SAAS,CAAC,CAAD,CAAvB,EAA4B;AACjCD,UAAAA,cAAc,CAACD,WAAW,GAAGM,CAAC,CAACC,GAAjB,CAAd,CADiC,CAEjC;AACD,SAHM,MAGA;AACLN,UAAAA,cAAc,CAAC,EAAD,CAAd;AACD;AACF,OAXD,MAWO,IAAIK,CAAC,CAACC,GAAF,KAAUR,WAAW,CAAC,CAAD,CAAzB,EAA8B;AACnC;AACAE,QAAAA,cAAc,CAACD,WAAW,GAAGM,CAAC,CAACC,GAAjB,CAAd;AACD,OAHM,MAGA;AACL;AACAN,QAAAA,cAAc,CAAC,EAAD,CAAd;AACD;AACF;AACF,GAtBU,CAAX;AAwBA,sBACE;AAAA,cACGG,KAAK,gBACJ;AAAI,MAAA,SAAS,EAAEX,OAAO,CAACgB,SAAvB;AAAA,6BACE,QAAC,SAAD;AACE,QAAA,KAAK,EAAEL,KADT;AAEE,QAAA,IAAI,EAAEL,WAFR;AAGE,QAAA,kBAAkB,EAAEN,OAAO,CAACiB;AAH9B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADI,gBASJ;AAAI,MAAA,SAAS,EAAEjB,OAAO,CAACgB,SAAvB;AAAA,gBAAmCV;AAAnC;AAAA;AAAA;AAAA;AAAA;AAVJ,mBADF;AAeD,CAnDD;;GAAMD,W;UAYJJ,W;;;KAZII,W;AAqDN,eAAeA,WAAf","sourcesContent":["import React, { useContext } from 'react';\nimport classes from './css/Highlighter.module.scss';\nimport useKeypress from '../../hooks/useKeypress';\nimport { WordsContext } from '../../context/WordsContext';\nimport { GameStateContext } from '../../context/GameStateContext';\nimport { Highlight } from 'react-highlight-regex';\n\nconst Highlighter = () => {\n  const { currentWord, toHighlight, setToHighlight, substring } =\n    useContext(WordsContext);\n\n  const { isTimeOut } = useContext(GameStateContext);\n\n  let regex = null;\n\n  if (toHighlight) {\n    regex = new RegExp(toHighlight);\n  }\n\n  useKeypress((e) => {\n    if (currentWord && !isTimeOut) {\n      // if a substring has been created (after a first character has been typed)\n      if (substring) {\n        // if it's the last character and the right letter...\n        if (e.key === substring[0] && substring.length === 1) {\n          setToHighlight('');\n          // elif it's the right letter...\n        } else if (e.key === substring[0]) {\n          setToHighlight(toHighlight + e.key);\n          // if it's the wrong letter\n        } else {\n          setToHighlight('');\n        }\n      } else if (e.key === currentWord[0]) {\n        // if it's the right character of the first letter, set the substring and highlight\n        setToHighlight(toHighlight + e.key);\n      } else {\n        //otherwise, switch the word out\n        setToHighlight('');\n      }\n    }\n  });\n\n  return (\n    <>\n      {regex ? (\n        <h1 className={classes.firstWord}>\n          <Highlight\n            match={regex}\n            text={currentWord}\n            highlightClassname={classes.highlight}\n          />\n        </h1>\n      ) : (\n        <h1 className={classes.firstWord}>{currentWord}</h1>\n      )}\n    </>\n  );\n};\n\nexport default Highlighter;\n"]},"metadata":{},"sourceType":"module"}