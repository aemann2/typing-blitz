{"ast":null,"code":"var _jsxFileName = \"/Users/adammann/Desktop/Projects/Portfolio/typing-blitz/client/src/components/wordChanger/WordChanger.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useContext } from 'react';\nimport classes from './css/WordChanger.module.scss';\nimport { WordsContext } from '../../context/WordsContext';\nimport { GameStateContext } from '../../context/GameStateContext';\nimport useKeypress from '../../hooks/useKeypress';\nimport Highlighter from '../highlighter/Highlighter';\nimport WordPreview from '../wordPreview/WordPreview';\nimport generateWords from '../../utils/randomWords';\nimport { motion } from 'framer-motion';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst wordVariants = {\n  hidden: {\n    opacity: 0\n  },\n  visible: {\n    opacity: 1,\n    transition: {\n      duration: 1.2\n    }\n  }\n};\n\nconst WordChanger = () => {\n  _s();\n\n  const {\n    wordArray,\n    setWordArray,\n    currentWord,\n    setCurrentWord,\n    substring,\n    setSubstring\n  } = useContext(WordsContext);\n  const {\n    isTimeOut,\n    difficulty,\n    showRoundEndModal\n  } = useContext(GameStateContext);\n  useEffect(() => {\n    if (!showRoundEndModal) {\n      setWordArray(generateWords(difficulty));\n    }\n  }, [setWordArray, difficulty, showRoundEndModal]);\n  useEffect(() => {\n    setCurrentWord(wordArray[0]);\n  }, [wordArray, setCurrentWord]);\n\n  const changeCurrentWord = () => {\n    setSubstring(null);\n    const wordIndex = wordArray.indexOf(currentWord);\n    setCurrentWord(wordArray[wordIndex + 1]);\n  };\n\n  useKeypress(e => {\n    if (currentWord && !isTimeOut) {\n      // if a substring has been created (after a first character has been typed)\n      if (substring) {\n        // if it's the last character and the right letter...\n        if (e.key === substring[0] && substring.length === 1) {\n          changeCurrentWord(); // elif it's the right letter...\n        } else if (e.key === substring[0]) {\n          setSubstring(substring.slice(1, currentWord.length)); // if it's the wrong letter\n        } else {\n          changeCurrentWord();\n        }\n      } else if (e.key === currentWord[0]) {\n        // if it's the right character of the first letter, set the substring\n        setSubstring(currentWord.slice(1, currentWord.length));\n      } else {\n        //otherwise, switch the word out\n        changeCurrentWord();\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(motion.div, {\n    className: classes.wordList,\n    variants: wordVariants,\n    initial: \"hidden\",\n    animate: \"visible\",\n    children: [/*#__PURE__*/_jsxDEV(Highlighter, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(WordPreview, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 3\n  }, this);\n};\n\n_s(WordChanger, \"dOg/G9Xw2UKmZUXH6Iqo7AoLgPg=\", false, function () {\n  return [useKeypress];\n});\n\n_c = WordChanger;\nexport default WordChanger;\n\nvar _c;\n\n$RefreshReg$(_c, \"WordChanger\");","map":{"version":3,"sources":["/Users/adammann/Desktop/Projects/Portfolio/typing-blitz/client/src/components/wordChanger/WordChanger.js"],"names":["React","useEffect","useContext","classes","WordsContext","GameStateContext","useKeypress","Highlighter","WordPreview","generateWords","motion","wordVariants","hidden","opacity","visible","transition","duration","WordChanger","wordArray","setWordArray","currentWord","setCurrentWord","substring","setSubstring","isTimeOut","difficulty","showRoundEndModal","changeCurrentWord","wordIndex","indexOf","e","key","length","slice","wordList"],"mappings":"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","sourcesContent":["import React, { useEffect, useContext } from 'react';\nimport classes from './css/WordChanger.module.scss';\nimport { WordsContext } from '../../context/WordsContext';\nimport { GameStateContext } from '../../context/GameStateContext';\nimport useKeypress from '../../hooks/useKeypress';\nimport Highlighter from '../highlighter/Highlighter';\nimport WordPreview from '../wordPreview/WordPreview';\nimport generateWords from '../../utils/randomWords';\nimport { motion } from 'framer-motion';\n\nconst wordVariants = {\n\thidden: {\n\t\topacity: 0,\n\t},\n\tvisible: {\n\t\topacity: 1,\n\t\ttransition: {\n\t\t\tduration: 1.2,\n\t\t},\n\t},\n};\n\nconst WordChanger = () => {\n\tconst {\n\t\twordArray,\n\t\tsetWordArray,\n\t\tcurrentWord,\n\t\tsetCurrentWord,\n\t\tsubstring,\n\t\tsetSubstring,\n\t} = useContext(WordsContext);\n\tconst { isTimeOut, difficulty, showRoundEndModal } =\n\t\tuseContext(GameStateContext);\n\n\tuseEffect(() => {\n\t\tif (!showRoundEndModal) {\n\t\t\tsetWordArray(generateWords(difficulty));\n\t\t}\n\t}, [setWordArray, difficulty, showRoundEndModal]);\n\n\tuseEffect(() => {\n\t\tsetCurrentWord(wordArray[0]);\n\t}, [wordArray, setCurrentWord]);\n\n\tconst changeCurrentWord = () => {\n\t\tsetSubstring(null);\n\t\tconst wordIndex = wordArray.indexOf(currentWord);\n\t\tsetCurrentWord(wordArray[wordIndex + 1]);\n\t};\n\n\tuseKeypress((e) => {\n\t\tif (currentWord && !isTimeOut) {\n\t\t\t// if a substring has been created (after a first character has been typed)\n\t\t\tif (substring) {\n\t\t\t\t// if it's the last character and the right letter...\n\t\t\t\tif (e.key === substring[0] && substring.length === 1) {\n\t\t\t\t\tchangeCurrentWord();\n\t\t\t\t\t// elif it's the right letter...\n\t\t\t\t} else if (e.key === substring[0]) {\n\t\t\t\t\tsetSubstring(substring.slice(1, currentWord.length));\n\t\t\t\t\t// if it's the wrong letter\n\t\t\t\t} else {\n\t\t\t\t\tchangeCurrentWord();\n\t\t\t\t}\n\t\t\t} else if (e.key === currentWord[0]) {\n\t\t\t\t// if it's the right character of the first letter, set the substring\n\t\t\t\tsetSubstring(currentWord.slice(1, currentWord.length));\n\t\t\t} else {\n\t\t\t\t//otherwise, switch the word out\n\t\t\t\tchangeCurrentWord();\n\t\t\t}\n\t\t}\n\t});\n\n\treturn (\n\t\t<motion.div\n\t\t\tclassName={classes.wordList}\n\t\t\tvariants={wordVariants}\n\t\t\tinitial='hidden'\n\t\t\tanimate='visible'\n\t\t>\n\t\t\t<Highlighter />\n\t\t\t<WordPreview />\n\t\t</motion.div>\n\t);\n};\n\nexport default WordChanger;\n"]},"metadata":{},"sourceType":"module"}