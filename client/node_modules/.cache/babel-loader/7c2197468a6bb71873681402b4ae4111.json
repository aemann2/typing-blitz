{"ast":null,"code":"var _jsxFileName = \"/Users/adammann/Desktop/Projects/Portfolio/typing-blitz/client/src/components/wordChanger/WordChanger.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useContext } from 'react';\nimport classes from './css/WordChanger.module.scss';\nimport { WordsContext } from '../../context/WordsContext';\nimport { GameStateContext } from '../../context/GameStateContext';\nimport useKeypress from '../../hooks/useKeypress';\nimport Highlighter from '../highlighter/Highlighter';\nimport WordPreview from '../wordPreview/WordPreview';\nimport generateWords from '../../utils/randomWords';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst WordChanger = () => {\n  _s();\n\n  const {\n    wordArray,\n    setWordArray,\n    currentWord,\n    setCurrentWord,\n    substring,\n    setSubstring\n  } = useContext(WordsContext);\n  const {\n    isTimeOut,\n    difficulty\n  } = useContext(GameStateContext);\n  useEffect(() => {\n    setWordArray(generateWords(difficulty));\n  }, [setWordArray, difficulty]);\n  useEffect(() => {\n    setCurrentWord(wordArray[0]);\n  }, [wordArray, setCurrentWord]);\n\n  const changeCurrentWord = () => {\n    setSubstring(null);\n    const wordIndex = wordArray.indexOf(currentWord);\n    setCurrentWord(wordArray[wordIndex + 1]);\n  };\n\n  useKeypress(e => {\n    if (currentWord && !isTimeOut) {\n      // if a substring has been created (after a first character has been typed)\n      if (substring) {\n        // if it's the last character and the right letter...\n        if (e.key === substring[0] && substring.length === 1) {\n          changeCurrentWord(); // elif it's the right letter...\n        } else if (e.key === substring[0]) {\n          setSubstring(substring.slice(1, currentWord.length)); // if it's the wrong letter\n        } else {\n          changeCurrentWord();\n        }\n      } else if (e.key === currentWord[0]) {\n        // if it's the right character of the first letter, set the substring\n        setSubstring(currentWord.slice(1, currentWord.length));\n      } else {\n        //otherwise, switch the word out\n        changeCurrentWord();\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.wordList,\n    children: [/*#__PURE__*/_jsxDEV(Highlighter, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(WordPreview, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n\n_s(WordChanger, \"BBLdS00Y2wP6Xk4QNIq5aI7soIQ=\", false, function () {\n  return [useKeypress];\n});\n\n_c = WordChanger;\nexport default WordChanger;\n\nvar _c;\n\n$RefreshReg$(_c, \"WordChanger\");","map":{"version":3,"sources":["/Users/adammann/Desktop/Projects/Portfolio/typing-blitz/client/src/components/wordChanger/WordChanger.js"],"names":["React","useEffect","useContext","classes","WordsContext","GameStateContext","useKeypress","Highlighter","WordPreview","generateWords","WordChanger","wordArray","setWordArray","currentWord","setCurrentWord","substring","setSubstring","isTimeOut","difficulty","changeCurrentWord","wordIndex","indexOf","e","key","length","slice","wordList"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,UAA3B,QAA6C,OAA7C;AACA,OAAOC,OAAP,MAAoB,+BAApB;AACA,SAASC,YAAT,QAA6B,4BAA7B;AACA,SAASC,gBAAT,QAAiC,gCAAjC;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,OAAOC,aAAP,MAA0B,yBAA1B;;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACxB,QAAM;AACJC,IAAAA,SADI;AAEJC,IAAAA,YAFI;AAGJC,IAAAA,WAHI;AAIJC,IAAAA,cAJI;AAKJC,IAAAA,SALI;AAMJC,IAAAA;AANI,MAOFd,UAAU,CAACE,YAAD,CAPd;AAQA,QAAM;AAAEa,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAA4BhB,UAAU,CAACG,gBAAD,CAA5C;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,YAAY,CAACH,aAAa,CAACS,UAAD,CAAd,CAAZ;AACD,GAFQ,EAEN,CAACN,YAAD,EAAeM,UAAf,CAFM,CAAT;AAIAjB,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,cAAc,CAACH,SAAS,CAAC,CAAD,CAAV,CAAd;AACD,GAFQ,EAEN,CAACA,SAAD,EAAYG,cAAZ,CAFM,CAAT;;AAIA,QAAMK,iBAAiB,GAAG,MAAM;AAC9BH,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,UAAMI,SAAS,GAAGT,SAAS,CAACU,OAAV,CAAkBR,WAAlB,CAAlB;AACAC,IAAAA,cAAc,CAACH,SAAS,CAACS,SAAS,GAAG,CAAb,CAAV,CAAd;AACD,GAJD;;AAMAd,EAAAA,WAAW,CAAEgB,CAAD,IAAO;AACjB,QAAIT,WAAW,IAAI,CAACI,SAApB,EAA+B;AAC7B;AACA,UAAIF,SAAJ,EAAe;AACb;AACA,YAAIO,CAAC,CAACC,GAAF,KAAUR,SAAS,CAAC,CAAD,CAAnB,IAA0BA,SAAS,CAACS,MAAV,KAAqB,CAAnD,EAAsD;AACpDL,UAAAA,iBAAiB,GADmC,CAEpD;AACD,SAHD,MAGO,IAAIG,CAAC,CAACC,GAAF,KAAUR,SAAS,CAAC,CAAD,CAAvB,EAA4B;AACjCC,UAAAA,YAAY,CAACD,SAAS,CAACU,KAAV,CAAgB,CAAhB,EAAmBZ,WAAW,CAACW,MAA/B,CAAD,CAAZ,CADiC,CAEjC;AACD,SAHM,MAGA;AACLL,UAAAA,iBAAiB;AAClB;AACF,OAXD,MAWO,IAAIG,CAAC,CAACC,GAAF,KAAUV,WAAW,CAAC,CAAD,CAAzB,EAA8B;AACnC;AACAG,QAAAA,YAAY,CAACH,WAAW,CAACY,KAAZ,CAAkB,CAAlB,EAAqBZ,WAAW,CAACW,MAAjC,CAAD,CAAZ;AACD,OAHM,MAGA;AACL;AACAL,QAAAA,iBAAiB;AAClB;AACF;AACF,GAtBU,CAAX;AAwBA,sBACE;AAAK,IAAA,SAAS,EAAEhB,OAAO,CAACuB,QAAxB;AAAA,4BACE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CAvDD;;GAAMhB,W;UAyBJJ,W;;;KAzBII,W;AAyDN,eAAeA,WAAf","sourcesContent":["import React, { useEffect, useContext } from 'react';\nimport classes from './css/WordChanger.module.scss';\nimport { WordsContext } from '../../context/WordsContext';\nimport { GameStateContext } from '../../context/GameStateContext';\nimport useKeypress from '../../hooks/useKeypress';\nimport Highlighter from '../highlighter/Highlighter';\nimport WordPreview from '../wordPreview/WordPreview';\nimport generateWords from '../../utils/randomWords';\n\nconst WordChanger = () => {\n  const {\n    wordArray,\n    setWordArray,\n    currentWord,\n    setCurrentWord,\n    substring,\n    setSubstring,\n  } = useContext(WordsContext);\n  const { isTimeOut, difficulty } = useContext(GameStateContext);\n\n  useEffect(() => {\n    setWordArray(generateWords(difficulty));\n  }, [setWordArray, difficulty]);\n\n  useEffect(() => {\n    setCurrentWord(wordArray[0]);\n  }, [wordArray, setCurrentWord]);\n\n  const changeCurrentWord = () => {\n    setSubstring(null);\n    const wordIndex = wordArray.indexOf(currentWord);\n    setCurrentWord(wordArray[wordIndex + 1]);\n  };\n\n  useKeypress((e) => {\n    if (currentWord && !isTimeOut) {\n      // if a substring has been created (after a first character has been typed)\n      if (substring) {\n        // if it's the last character and the right letter...\n        if (e.key === substring[0] && substring.length === 1) {\n          changeCurrentWord();\n          // elif it's the right letter...\n        } else if (e.key === substring[0]) {\n          setSubstring(substring.slice(1, currentWord.length));\n          // if it's the wrong letter\n        } else {\n          changeCurrentWord();\n        }\n      } else if (e.key === currentWord[0]) {\n        // if it's the right character of the first letter, set the substring\n        setSubstring(currentWord.slice(1, currentWord.length));\n      } else {\n        //otherwise, switch the word out\n        changeCurrentWord();\n      }\n    }\n  });\n\n  return (\n    <div className={classes.wordList}>\n      <Highlighter />\n      <WordPreview />\n    </div>\n  );\n};\n\nexport default WordChanger;\n"]},"metadata":{},"sourceType":"module"}