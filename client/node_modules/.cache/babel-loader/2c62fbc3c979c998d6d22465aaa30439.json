{"ast":null,"code":"import React, { useMemo } from 'react';\n\nfunction Highlight(_ref) {\n  var text = _ref.text,\n      match = _ref.match,\n      highlightClassname = _ref.highlightClassname;\n  var $match = useMemo(function () {\n    if (match.flags.includes('g')) return match;\n    return new RegExp(match.source, 'g' + match.flags);\n  }, [match]);\n  var matchedPieces = Array.from(text.matchAll($match)).map(function (_ref2) {\n    var text = _ref2[0];\n    return text;\n  });\n  var preservedPieces = text.split($match);\n  var content = [];\n  var i = 0;\n\n  while (matchedPieces.length || preservedPieces.length) {\n    if (preservedPieces.length) {\n      content.push(React.createElement(\"span\", {\n        key: i++\n      }, preservedPieces.shift()));\n    }\n\n    if (matchedPieces.length) {\n      content.push(React.createElement(\"mark\", {\n        className: highlightClassname,\n        key: i++\n      }, matchedPieces.shift()));\n    }\n  }\n\n  return React.createElement(React.Fragment, null, content);\n}\n\nexport { Highlight };","map":{"version":3,"sources":["../src/index.tsx"],"names":["Highlight","text","match","highlightClassname","$match","useMemo","matchedPieces","preservedPieces","content","i","key","className","React"],"mappings":";;SAQgBA,S,CAAAA,I,EAAAA;MAAYC,IAAAA,GAAAA,IAAAA,CAAAA,I;MAAMC,KAAAA,GAAAA,IAAAA,CAAAA,K;MAAOC,kBAAAA,GAAAA,IAAAA,CAAAA,kB;AACvC,MAAMC,MAAM,GAAGC,OAAO,CAAC,YAAA;AACrB,QAAIH,KAAK,CAALA,KAAAA,CAAAA,QAAAA,CAAJ,GAAIA,CAAJ,EAA+B,OAAA,KAAA;AAC/B,WAAO,IAAA,MAAA,CAAWA,KAAK,CAAhB,MAAA,EAAyB,MAAMA,KAAK,CAA3C,KAAO,CAAP;AAFoB,GAAA,EAGnB,CAHH,KAGG,CAHmB,CAAtB;AAKA,MAAMI,aAAa,GAAG,KAAK,CAAL,IAAA,CAAWL,IAAI,CAAJA,QAAAA,CAAX,MAAWA,CAAX,EAAA,GAAA,CAAsC,UAAA,KAAA,EAAA;AAAA,QAAEA,IAAF,GAAA,KAAA,CAAA,CAAA,CAAA;AAAA,WAAA,IAAA;AAA5D,GAAsB,CAAtB;AACA,MAAMM,eAAe,GAAGN,IAAI,CAAJA,KAAAA,CAAxB,MAAwBA,CAAxB;AACA,MAAMO,OAAO,GAAb,EAAA;AAEA,MAAIC,CAAC,GAAL,CAAA;;AACA,SAAOH,aAAa,CAAbA,MAAAA,IAAwBC,eAAe,CAA9C,MAAA,EAAuD;AACrD,QAAIA,eAAe,CAAnB,MAAA,EAA4B;AAC1BC,MAAAA,OAAO,CAAPA,IAAAA,CAAa,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAME,QAAAA,GAAG,EAAED,CAAC;AAAZ,OAAA,EAAiBF,eAAe,CAA7CC,KAA8BD,EAAjB,CAAbC;AACD;;AACD,QAAIF,aAAa,CAAjB,MAAA,EAA0B;AACxBE,MAAAA,OAAO,CAAPA,IAAAA,CACE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAMG,QAAAA,SAAS,EAAER,kBAAjB;AAAqCO,QAAAA,GAAG,EAAED,CAAC;AAA3C,OAAA,EACGH,aAAa,CAFlBE,KAEKF,EADH,CADFE;AAKD;AACF;;AAED,SAAOI,KAAAA,CAAAA,aAAAA,CAAAA,KAAAA,CAAAA,QAAAA,EAAAA,IAAAA,EAAP,OAAOA,CAAP;AACD","sourcesContent":["import React, { useMemo } from 'react';\n\nexport type Props = {\n  text: string;\n  match: RegExp;\n  highlightClassname?: string;\n};\n\nexport function Highlight({ text, match, highlightClassname }: Props) {\n  const $match = useMemo(() => {\n    if (match.flags.includes('g')) return match;\n    return new RegExp(match.source, 'g' + match.flags);\n  }, [match]);\n\n  const matchedPieces = Array.from(text.matchAll($match)).map(([text]) => text);\n  const preservedPieces = text.split($match);\n  const content = [];\n\n  let i = 0;\n  while (matchedPieces.length || preservedPieces.length) {\n    if (preservedPieces.length) {\n      content.push(<span key={i++}>{preservedPieces.shift()}</span>);\n    }\n    if (matchedPieces.length) {\n      content.push(\n        <mark className={highlightClassname} key={i++}>\n          {matchedPieces.shift()}\n        </mark>\n      );\n    }\n  }\n\n  return <>{content}</>;\n}\n"]},"metadata":{},"sourceType":"module"}