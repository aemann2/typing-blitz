import React, { useMemo } from 'react';

function Highlight(_ref) {
  var text = _ref.text,
      match = _ref.match,
      highlightClassname = _ref.highlightClassname;
  var $match = useMemo(function () {
    if (match.flags.includes('g')) return match;
    return new RegExp(match.source, 'g' + match.flags);
  }, [match]);
  var matchedPieces = Array.from(text.matchAll($match)).map(function (_ref2) {
    var text = _ref2[0];
    return text;
  });
  var preservedPieces = text.split($match);
  var content = [];
  var i = 0;

  while (matchedPieces.length || preservedPieces.length) {
    if (preservedPieces.length) {
      content.push(React.createElement("span", {
        key: i++
      }, preservedPieces.shift()));
    }

    if (matchedPieces.length) {
      content.push(React.createElement("mark", {
        className: highlightClassname,
        key: i++
      }, matchedPieces.shift()));
    }
  }

  return React.createElement(React.Fragment, null, content);
}

export { Highlight };
//# sourceMappingURL=react-highlight-regex.esm.js.map
